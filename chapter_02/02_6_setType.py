
# 자료형 - 집합
# set() : 괄호 안에 리스트를 입력하거나 문자열 입력
s1 = set([1, 2, 3])
print(s1)   # {1, 2, 3}

s2 = set('hello')
print(s2)   # {'l', 'e', 'o', 'h'}

# 집합 자료형 특징
# 1) 중복을 허용하지 않음
# 2) 순서가 없음
# ** set은 중복을 허용하지 않는 특징때문에 중복을 제거하기 위한 필터 용도로 종종 사용되기도 함
# ** set은 순서가 없기 때문에 리스트와 튜플처럼 인덱싱을 통해 요소값을 얻을 수 없음 (딕셔너리와 비슷)
# ** : set 자료형에 저장된 값을 인덱싱으로 접근하려면 리스트 or 튜플로 변환 후 가능!
s1 = set([1, 2, 3])
l1 = list(s1)   # 리스트로 변환
print(l1)       # [1, 2, 3]
print(l1[0])    # 1

t1 = tuple(s1)  # 튜플로 변환
print(t1)       # (1, 2, 3)
print(t1[2])    # 3


# 1. 교집합 / 합집합 / 차집합
s1 = set([1, 2, 3, 4, 5, 6])
s2 = set([4, 5, 6, 7, 8, 9])

# 1-1) & : 교집합
print(s1 & s2)  # {4, 5, 6}

# intersection() 함수로 교집합을 구할 수도 있다.
print(s1.intersection(s2))

# 1-2) | : 합집합
# 중복 값은 1개씩만 표현된다.
print(s1 | s2)  # {1, 2, 3, 4, 5, 6, 7, 8, 9}

# union() 함수로 합집합을 구할 수도 있다.
s1.union(s2)

# 1-3) - : 차집합
print(s1 - s2)  # {1, 2, 3}

# difference() 함수로 차집합을 구할 수도 있다.
print(s1.difference(s2))

# 2. 집합 관련 함수
# 2-1) add : 만들어진 set 자료형에 값 1개 추가
s1 = set([1, 2, 3])
s1.add(4)
print(s1)   # {1, 2, 3, 4}

# 2-2) update : 여러 개의 값을 한꺼번에 추가
s1 = set([1, 2, 3])
s1.update([4, 5, 6])
print(s1)   # {1, 2, 3, 4, 5, 6}

# 2-3) remove : 특정 값 제거 (단일 값만 삭제 가능)
s1 = set([1, 2, 3])
s1.remove(2)
print(s1)

# ** 여러 개의 값을 한 번에 삭제하고 싶은 경우 '집합 차집합 연산' 사용
s1 = s1 - set([2, 3])
print(s1)   # {1}
